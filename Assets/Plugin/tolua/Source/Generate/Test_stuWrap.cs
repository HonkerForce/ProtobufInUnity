//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Test_stuWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Test.stu), typeof(System.Object));
		L.RegFunction("Clone", Clone);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToString", ToString);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("CalculateSize", CalculateSize);
		L.RegFunction("MergeFrom", MergeFrom);
		L.RegFunction("New", _CreateTest_stu);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("IdFieldNumber", 1);
		L.RegConstant("StrFieldNumber", 2);
		L.RegConstant("WowFieldNumber", 3);
		L.RegVar("Parser", get_Parser, null);
		L.RegVar("Descriptor", get_Descriptor, null);
		L.RegVar("Id", get_Id, set_Id);
		L.RegVar("Str", get_Str, set_Str);
		L.RegVar("Wow", get_Wow, set_Wow);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTest_stu(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Test.stu obj = new Test.stu();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				Test.stu arg0 = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
				Test.stu obj = new Test.stu(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Test.stu.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
			Test.stu o = obj.Clone();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Test.stu>(L, 2))
			{
				Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
				Test.stu arg0 = (Test.stu)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Test.stu.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
			Google.Protobuf.CodedOutputStream arg0 = (Google.Protobuf.CodedOutputStream)ToLua.CheckObject(L, 2, typeof(Google.Protobuf.CodedOutputStream));
			obj.WriteTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
			int o = obj.CalculateSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MergeFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Test.stu>(L, 2))
			{
				Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
				Test.stu arg0 = (Test.stu)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Google.Protobuf.CodedInputStream>(L, 2))
			{
				Test.stu obj = (Test.stu)ToLua.CheckObject(L, 1, typeof(Test.stu));
				Google.Protobuf.CodedInputStream arg0 = (Google.Protobuf.CodedInputStream)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Test.stu.MergeFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parser(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Test.stu.Parser);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Descriptor(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Test.stu.Descriptor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			int ret = obj.Id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Str(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			string ret = obj.Str;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Str on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Wow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			int ret = obj.Wow;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Wow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Str(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Str = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Str on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Wow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test.stu obj = (Test.stu)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Wow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Wow on a nil value");
		}
	}
}

