//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Test2_peopleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Test2.people), typeof(System.Object));
		L.RegFunction("Clone", Clone);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToString", ToString);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("CalculateSize", CalculateSize);
		L.RegFunction("MergeFrom", MergeFrom);
		L.RegFunction("New", _CreateTest2_people);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("NameFieldNumber", 1);
		L.RegConstant("NumFieldNumber", 2);
		L.RegVar("Parser", get_Parser, null);
		L.RegVar("Descriptor", get_Descriptor, null);
		L.RegVar("Name", get_Name, set_Name);
		L.RegVar("Num", get_Num, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTest2_people(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Test2.people obj = new Test2.people();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				Test2.people arg0 = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
				Test2.people obj = new Test2.people(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Test2.people.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
			Test2.people o = obj.Clone();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Test2.people>(L, 2))
			{
				Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
				Test2.people arg0 = (Test2.people)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Test2.people.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
			Google.Protobuf.CodedOutputStream arg0 = (Google.Protobuf.CodedOutputStream)ToLua.CheckObject(L, 2, typeof(Google.Protobuf.CodedOutputStream));
			obj.WriteTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
			int o = obj.CalculateSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MergeFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Test2.people>(L, 2))
			{
				Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
				Test2.people arg0 = (Test2.people)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Google.Protobuf.CodedInputStream>(L, 2))
			{
				Test2.people obj = (Test2.people)ToLua.CheckObject(L, 1, typeof(Test2.people));
				Google.Protobuf.CodedInputStream arg0 = (Google.Protobuf.CodedInputStream)ToLua.ToObject(L, 2);
				obj.MergeFrom(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Test2.people.MergeFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parser(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Test2.people.Parser);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Descriptor(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Test2.people.Descriptor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test2.people obj = (Test2.people)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Num(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test2.people obj = (Test2.people)o;
			Google.Protobuf.Collections.RepeatedField<int> ret = obj.Num;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Num on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Test2.people obj = (Test2.people)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}
}

